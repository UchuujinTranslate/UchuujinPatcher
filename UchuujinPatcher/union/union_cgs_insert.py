import os
import struct
import json
import gzip
import io
import glob
import sys
group1_ptr_offset =0x131558
group1_sizes  ={2108:0x15,
2109:0x17,
2110:0x1C,
2111:0x17,
2112:0x16,
2113:0x18,
2114:0x17,
2115:0x17,
2116:0x16,
2117:0x15,
2118:0x18,
2119:0x13,
2120:0x12,
2121:0x0D,
2122:0x14,
2123:0x1A,
2124:0x16,
2125:0x18,
2126:0x29,
2127:0x29,
2128:0x2B,
2129:0x1A,
2130:0x1B,
2131:0x1E,
2132:0x2B,
2133:0x14,
2134:0x14,
2135:0x14,
2136:0x15,
2137:0x14,
2138:0x14,
2139:0x14,
2140:0x15,
2141:0x1C,
2142:0x1B,
2143:0x1B,
2144:0x1B,
2145:0x1B,
2146:0x20,
2147:0x1F,
2148:0x1F,
2149:0x1F,
2150:0x24,
2151:0x13,
2152:0x13,
2153:0x1E,
2154:0x21,
2155:0x16,
2156:0x18,
2157:0x13,
2158:0x16,
2159:0x19,
2160:0x15,
2161:0x10,
2162:0x21,
2163:0x2D,
2164:0x1F,
2165:0x1F,
2166:0x21,
2167:0x22,
2168:0x20,
2169:0x21,
2170:0x1D,
2171:0x27,
2172:0x1A,
2173:0x1E,
2174:0x22,
2175:0x22,
2176:0x22,
2177:0x22,
2178:0x20,
2179:0x1D,
2180:0x1D,
2181:0x17,
2182:0x17,
2183:0x1B,
2184:0x2B,
2185:0x2D,
2186:0x2C,
2187:0x2A,
2188:0x2C,
2189:0x2D,
2190:0x2E,
2191:0x2D,
2192:0x1C,
2193:0x1E,
2194:0x1E,
2195:0x17,
2196:0x16,
2197:0x16,
2198:0x13,
2199:0x16,
2200:0x24,
2201:0x24,
2202:0x1A,
2203:0x29,
2204:0x21,
2205:0x26,
2206:0x21,
2207:0x18,
2208:0x17,
2209:0x17,
2210:0x16,
2211:0x18,
2212:0x1A,
2213:0x18,
2214:0x19,
2215:0x1A,
2216:0x26,
2217:0x22,
2218:0x1A,
2219:0x1C,
2220:0x1B,
2221:0x20,
2222:0x17,
2223:0x1D,
2224:0x22,
2225:0x19,
2226:0x14,
2227:0x13,
2228:0x18,
2229:0x0C,
2230:0x0D,
2231:0x0C,
2232:0x0D,
2233:0x17,
2234:0x18,
2235:0x18,
2236:0x26,
2237:0x28,
2238:0x2B,
2239:0x1B,
2240:0x1A,
2241:0x2A,
2242:0x2A,
2243:0x22,
2244:0x1D,
2245:0x1E,
2246:0x22,
2247:0x21,
2248:0x21,
2249:0x21,
2250:0x17,
2251:0x15,
2252:0x1F,
2253:0x1B,
2254:0x0D,
2255:0x1B,
2256:0x22,
2257:0x26,
2258:0x26,
2259:0x19,
2260:0x19,
2261:0x17,
2262:0x17,
2263:0x23,
2264:0x16,
2265:0x1E,
2266:0x16,
2267:0x16,
2268:0x17,
2269:0x29,
2270:0x24,
2271:0x20,
2272:0x1C,
2273:0x1E,
2274:0x1F,
2275:0x21,
2276:0x20,
2277:0x20,
2278:0x1C,
2279:0x21,
2280:0x23,
2281:0x16,
2282:0x14,
2283:0x1B,
2284:0x1D,
2285:0x1C,
2286:0x1C,
2287:0x1D,
2288:0x19,
2289:0x1D,
2290:0x2E,
2291:0x26,
2292:0x14,
2293:0x24,
2294:0x14,
2295:0x24,
2296:0x15,
2297:0x24,
2298:0x20,
2299:0x21,
2300:0x14,
2301:0x24,
2302:0x25,
2303:0x24,
2304:0x1C,
2305:0x1F,
2306:0x24,
2307:0x20,
2308:0x20,
2309:0x1D,
2310:0x1E,
2311:0x1D,
2312:0x20,
2313:0x21,
2314:0x20,
2315:0x25,
2316:0x29,
2317:0x2B,
2318:0x29,
2319:0x29,
2320:0x29,
2321:0x1B,
2322:0x22,
2323:0x21,
2324:0x1C,
2325:0x1C,
2326:0x29,
2327:0x17,
2328:0x29,
2329:0x16,
2330:0x1C,
2331:0x24,
2332:0x16,
2333:0x15,
2334:0x21,
2335:0x13,
2336:0x08,
2337:0x07,
2338:0x08,
2339:0x07,
2340:0x08,
2341:0x08,
2342:0x08,
2343:0x07,
2344:0x08,
2345:0x08,
2346:0x22,
2347:0x24,
2348:0x2F,
2349:0x2C,
2350:0x2A,
2351:0x30,
2352:0x20,
2353:0x1B,
2354:0x1B,
2355:0x23,
2356:0x23,
2357:0x21,
2358:0x21,
2359:0x21,
2360:0x20,
2361:0x24,
2362:0x23,
2363:0x21,
2364:0x21,
2365:0x21,
2366:0x21,
2367:0x1E,
2368:0x1E,
2369:0x1E,
2370:0x1A,
2371:0x0D,
2372:0x21,
2373:0x1C,
2374:0x1E,
2375:0x1E,
2376:0x20,
2377:0x1F,
2378:0x19,
2379:0x19,
2380:0x19,
2381:0x18,
2382:0x18,
2383:0x18,
2384:0x2A,
2385:0x28,
2386:0x24,
2387:0x22,
2388:0x24,
2389:0x21,
2390:0x22,
2391:0x22,
2392:0x22,
2393:0x26,
2394:0x1F,
2395:0x20,
2396:0x26,
2397:0x1F,
2398:0x1F,
2399:0x22,
2400:0x1E,
2401:0x1F,
2402:0x1E,
2403:0x24,
2404:0x22,
2405:0x21,
2406:0x23,
2407:0x22,
2408:0x21,
2409:0x21,
2410:0x22,
2411:0x22,
2412:0x21,
2413:0x25,
2414:0x26,
2415:0x22,
2416:0x24,
2417:0x24,
2418:0x23,
2419:0x1E,
2420:0x21,
2421:0x1D,
2422:0x20,
2423:0x20,
2424:0x1E,
2425:0x25,
2426:0x26,
2427:0x20,
2428:0x25,
2429:0x0A,
2430:0x25,
2431:0x1C,
2432:0x25,
2433:0x1B,
2434:0x1B,
2435:0x25,
2436:0x1B,
2437:0x29,
2438:0x27,
2439:0x24,
2440:0x26,
2441:0x25,
2442:0x27,
2443:0x27,
2444:0x1B,
2445:0x25,
2446:0x14,
2447:0x26,
2448:0x26,
2449:0x26,
2450:0x26,
2451:0x18,
2452:0x26,
2453:0x1D,
2454:0x26,
2455:0x19,
2456:0x1C,
2457:0x20,
2458:0x25,
2459:0x25,
2460:0x1C,
2461:0x07,
2462:0x12,
2463:0x2A,
2464:0x2A,
2465:0x2B,
2466:0x2B,
2467:0x2A,
2468:0x2B,
2469:0x2B,
2470:0x2B,
2471:0x2C,
2472:0x08,
2473:0x0F,
2474:0x12,
2475:0x1A,
2476:0x1C,
2477:0x12,
2478:0x1B,
2479:0x14,
2480:0x16,
2481:0x16,
2482:0x10,
2483:0x0F,
2484:0x10,
2485:0x15,
2486:0x14,
2487:0x14,
2488:0x15,
2489:0x16,
2490:0x17,
2491:0x14,
2492:0x11,
2493:0x37,
2494:0x38,
2495:0x38,
2496:0x23,
2497:0x23,
2498:0x29,
2499:0x26,
2500:0x26,
2501:0x25,
2502:0x25,
2503:0x25,
2504:0x25,
2505:0x25,
2506:0x24,
2507:0x25,
2508:0x25,
2509:0x24,
2510:0x25,
2511:0x22,
2512:0x22,
2513:0x22,
2514:0x22,
2515:0x22,
2516:0x21,
2517:0x26,
2518:0x26,
2519:0x26,
2520:0x22,
2521:0x21,
2522:0x21,
2523:0x24,
2524:0x27,
2525:0x22,
2526:0x27,
2527:0x25,
2528:0x23,
2529:0x29,
2530:0x2A,
2531:0x29,
2532:0x24,
2533:0x23,
2534:0x20,
2535:0x22,
2536:0x24,
2537:0x20,
2538:0x24,
2539:0x23,
2540:0x24,
2541:0x26,
2542:0x28,
2543:0x25,
2544:0x27,
2545:0x29,
2546:0x28,
2547:0x29,
2548:0x2B,
2549:0x29,
2550:0x27,
2551:0x29,
2552:0x29,
2553:0x26,
2554:0x27,
2555:0x27,
2556:0x25,
2557:0x25,
2558:0x23,
2559:0x2A,
2560:0x2B,
2561:0x2A,
2562:0x26,
2563:0x24,
2564:0x26,
2565:0x26,
2566:0x25,
2567:0x25,
2568:0x21,
2569:0x20,
2570:0x20,
2571:0x20,
2572:0x20,
2573:0x20,
2574:0x21,
2575:0x21,
2576:0x22,
2577:0x23,
2578:0x22,
2579:0x22,
2580:0x1C,
2581:0x1C,
2582:0x1C,
2583:0x21,
2584:0x20,
2585:0x20,
2586:0x24,
2587:0x22,
2588:0x24,
2589:0x2C,
2590:0x29,
2591:0x26,
2592:0x29,
2593:0x2B,
2594:0x28,
2595:0x23,
2596:0x24,
2597:0x24,
2598:0x26,
2599:0x21,
2600:0x1F,
2601:0x21,
2602:0x20,
2603:0x1A,
2604:0x20,
2605:0x1B,
2606:0x16,
2607:0x21,
2608:0x23,
2609:0x22,
2610:0x21,
2611:0x23,
2612:0x1E,
2613:0x25,
2614:0x1E,
2615:0x14,
2616:0x1B,
2617:0x04,
2618:0x04,
2619:0x1F,
2620:0x19,
2621:0x19,
2622:0x2C,
2623:0x2C,
2624:0x2C,
2625:0x34,
2626:0x34,
2627:0x34,
2628:0x07,
2629:0x06,
2630:0x05,
2631:0x0A,}
group2_ptr_offset =0x131D88
group2_sizes = {2632:0x11,
2633:0x0F,
2634:0x10,
2635:0x10,
2636:0x10,
2637:0x10,
2638:0x0F,
2639:0x10,
2640:0x0F,
2641:0x10,
2642:0x09,
2643:0x09,
2644:0x09,
2645:0x09,
2646:0x09,
2647:0x0D,
2648:0x10,
2649:0x10,
2650:0x10,
2651:0x13,
2652:0x0F,
2653:0x12,
2654:0x14,
2655:0x10,
2656:0x12,
2657:0x0E,
2658:0x12,
2659:0x13,
2660:0x0E,
2661:0x10,
2662:0x15,
2663:0x0D,
2664:0x15,
2665:0x0F,
2666:0x15,
2667:0x0C,
2668:0x14,
2669:0x08,
2670:0x08,
2671:0x07,
2672:0x08,
2673:0x14,
2674:0x11,
2675:0x0F,
2676:0x11,
2677:0x13,
2678:0x10,
2679:0x0F,
2680:0x11,
2681:0x0C,
2682:0x0B,
2683:0x0A,
2684:0x0B,
2685:0x08,
2686:0x08,
2687:0x08,
2688:0x08,
2689:0x0B,
2690:0x0A,
2691:0x0A,
2692:0x0A,
2693:0x0A,
2694:0x0D,
2695:0x0E,
2696:0x0A,
2697:0x0D,
2698:0x08,
2699:0x08,
2700:0x09,
2701:0x08,
2702:0x08,
2703:0x0D,
2704:0x0E,
2705:0x0D,
2706:0x12,
2707:0x10,
2708:0x12,
2709:0x10,
2710:0x0F,
2711:0x10,
2712:0x10,
2713:0x10,
2714:0x0D,
2715:0x13,
2716:0x09,
2717:0x0A,
2718:0x08,
2719:0x08,
2720:0x08,
2721:0x09,
2722:0x17,
2723:0x19,
2724:0x11,
2725:0x13,
2726:0x14,
2727:0x09,
2728:0x0A,
2729:0x0B,
2730:0x0B,
2731:0x09,
2732:0x0B,
2733:0x09,
2734:0x0A,
2735:0x08,
2736:0x08,
2737:0x17,
2738:0x11,
2739:0x12,
2740:0x0D,
2741:0x0D,
2742:0x13,
2743:0x0F,
2744:0x11,
2745:0x1B,
2746:0x0D,
2747:0x09,
2748:0x0A,
2749:0x0F,
2750:0x09,
2751:0x0E,
2752:0x11,
2753:0x11,
2754:0x10,
2755:0x10,
2756:0x0A,
2757:0x0E,
2758:0x0D,
2759:0x0F,
2760:0x09,
2761:0x0C,
2762:0x0A,
2763:0x09,
2764:0x0D,
2765:0x14,
2766:0x11,
2767:0x14,
2768:0x0D,
2769:0x14,
2770:0x11,
2771:0x14,
2772:0x0D,
2773:0x14,
2774:0x11,
2775:0x14,
2776:0x0D,
2777:0x14,
2778:0x11,
2779:0x14,
2780:0x0D,
2781:0x14,
2782:0x11,
2783:0x14,
2784:0x0D,
2785:0x14,
2786:0x11,
2787:0x14,
2788:0x0D,
2789:0x14,
2790:0x11,
2791:0x14,
2792:0x0D,
2793:0x14,
2794:0x11,
2795:0x14,
2796:0x0D,
2797:0x14,
2798:0x11,
2799:0x14,
2800:0x0D,
2801:0x14,
2802:0x11,
2803:0x14,
2804:0x0D,
2805:0x14,
2806:0x11,
2807:0x14,
2808:0x0D,
2809:0x0D,
2810:0x0B,
2811:0x0A,
2812:0x09,
2813:0x09,
2814:0x0B,
2815:0x0C,
2816:0x08,
2817:0x0A,
2818:0x0A,
2819:0x0A,
2820:0x0A,
2821:0x0B,
2822:0x0A,
2823:0x0A,
2824:0x07,
2825:0x0A,
2826:0x09,
2827:0x0A,
2828:0x0A,
2829:0x0A,
2830:0x0B,
2831:0x0C,
2832:0x0B,
2833:0x07,
2834:0x0A,
2835:0x0C,
2836:0x0C,
2837:0x0B,
2838:0x0A,
2839:0x0A,
2840:0x08,
2841:0x0B,
2842:0x0A,
2843:0x0B,
2844:0x0B,
2845:0x0A,
2846:0x09,
2847:0x0A,
2848:0x09,
2849:0x0B,
2850:0x0A,
2851:0x0B,
2852:0x0B,
2853:0x0A,
2854:0x0B,
2855:0x0C,
2856:0x0A,
2857:0x0B,
2858:0x0E,
2859:0x0E,
2860:0x0E,
2861:0x0D,
2862:0x0B,
2863:0x0B,
2864:0x07,
2865:0x07,
2866:0x08,
2867:0x08,
2868:0x09,
2869:0x09,
2870:0x09,
2871:0x09,
2872:0x0A,
2873:0x0A,
2874:0x0A,
2875:0x0C,
2876:0x0A,
2877:0x07,
2878:0x0A,
2879:0x09,
2880:0x0B,
2881:0x0B,
2882:0x0B,
2883:0x0C,
2884:0x0A,
2885:0x0A,
2886:0x0C,
2887:0x08,
2888:0x0A,
2889:0x0A,}
group3_ptr_offset = 0x1468C0
group3_sizes = {2890:0x0A,
2891:0x01,
2892:0x12,
2893:0x12,
2894:0x12,
2895:0xBF,
2896:0xF2,
2897:0x18,
2898:0x1A,
2899:0x01,
2900:0x80,
2901:0xC1,
2902:0xFD,
2903:0x39,
2904:0xAE,
2905:0x35,
2906:0x2D,
2907:0x28,
2908:0x21,
2909:0x1B,
2910:0x1B,
2911:0x22,
2912:0x1F,
2913:0x1C,
2914:0x29,
2915:0x26,
2916:0x22,
2917:0x28,
2918:0x22,
2919:0x1D,
2920:0x62,
2921:0x1C,
2922:0x16,
2923:0x21,
2924:0x21,
2925:0x1E,
2926:0x1E,
2927:0x1E,
2928:0x1E,
2929:0x21,
2930:0x21,
2931:0x1E,
2932:0x1E,
2933:0x1E,
2934:0x1E,
2935:0x1C,
2936:0x22,
2937:0x1A,
2938:0x17,
2939:0x1E,
2940:0x1E,
2941:0x30,
2942:0x1B,
2943:0x0B,
2944:0x10,
2945:0x08,
2946:0x12,
2947:0x12,
2948:0x10,
2949:0x0D,
2950:0x16,
2951:0x0F,
2952:0x12,
2953:0x0A,
2954:0x0F,
2955:0x10,
2956:0x0F,
2957:0x0E,
2958:0x08,
2959:0x0B,
2960:0x12,
2961:0x0E,
2962:0x10,
2963:0x0D,
2964:0x0D,
2965:0x0E,
2966:0x09,
2967:0x0D,
2968:0x10,
2969:0x0F,
2970:0x10,
2971:0x4B,
2972:0xA7,
2973:0x8A,
2974:0x14,
2975:0x17,
2976:0x11,
2977:0x11,
2978:0x19,
2979:0x1A,
2980:0x14,
2981:0x13,
2982:0x1A,
2983:0x18,
2984:0x1A,
2985:0x17,
2986:0x17,
2987:0x1A,
2988:0x15,
2989:0x16,
2990:0x17,
2991:0x1A,
2992:0x12,
2993:0x13,
2994:0x1D,
2995:0x17,
2996:0x17,
2997:0x18,
2998:0x1A,
2999:0x17,
3000:0x14,
3001:0x11,
3002:0x0F,
3003:0x0F,
3004:0x0A,
3005:0x0C,
3006:0x1A,
3007:0x17,
3008:0x19,
3009:0x14,
3010:0x19,
3011:0x16,
3012:0x12,
3013:0x16,
3014:0x1B,
3015:0x18,
3016:0x17,
3017:0x1F,
3018:0x1F,
3019:0x17,
3020:0x12,
3021:0x10,
3022:0x01,
3023:0x02,
3024:0x03,
3025:0x03,
3026:0x02,
3027:0x02,
3028:0x02,
3029:0x02,
3030:0x01,
3031:0x02,
3032:0x02,
3033:0x02,
3034:0x01,
3035:0x01,}
def make_pixel(chunk,ref,dsizes,binary):
    ret = io.BytesIO()
    ret.write(struct.pack("I",chunk))
    binary_compressed = io.BytesIO()
    for size in dsizes:
        ret.write(struct.pack("I",binary_compressed.tell()+ref))
        binary_compressed.write(struct.pack("IIII", size, 0, 0, 0))
        binary_compressed.write(gzip.compress(binary.read(size),compresslevel=9))
        align = (16 - (binary_compressed.tell() % 16))
        if align:
            binary_compressed.write(b"\x00" * align)
    ret.write(struct.pack("I", binary_compressed.tell() + ref))
    align = (16 - (binary_compressed.tell() % 16))
    if align:
        binary_compressed.write(b"\x00" * align)
    ret.seek(ref)
    ret.write(binary_compressed.getbuffer())
    align = (0x800 - (ret.tell() % 0x800))
    if align:
        ret.write(b"\x00" * align )
    s = ret.tell()
    ret.seek(0)
    p1 = 0x11111111
    p2 = 0x11111111
    p3 = 0x11111111
    p4 = 0x11111111
    m = 0xffffffff
    s -= 16
    while s > 0:
        a1 = int.from_bytes(ret.read(4), byteorder='little')
        a2 = int.from_bytes(ret.read(4), byteorder='little')
        a3 = int.from_bytes(ret.read(4), byteorder='little')
        a4 = int.from_bytes(ret.read(4), byteorder='little')
        p1 += a1
        p1 = p1 & m
        if p1 < a1:
            p2 += 1 + a2
        else:
            p2 += 0 + a2
        p2 = p2 & m
        p3 += a3
        p3 = p3 & m
        if p3 < a3:
            p4 += 1 + a4
        else:
            p4 += 0 + a4
        p4 = p4 & m
        s -= 16
    #print("%x %x %x %x" % (p1, p2, p3, p4))
    checksum = struct.pack("<IIII", p1, p2, p3, p4)
    ret.seek(-16, 2)
    ret.write(checksum)
    ret.seek(0)
    return ret.read()

def cgs_insert():
    cwd = os.getcwd()
    os.makedirs(os.path.dirname("work/isofiles/union_patched/"), exist_ok=True)
    eboot = open("work/isofiles/EBOOT_patched.BIN", "r+b")
    for js in glob.glob("work/isofiles/cgs_translated/*.json"):
        info = json.loads(open(js, "rb").read())
        union_index = int(os.path.basename(js[:-5]))
        pixel_index = 1
        out = open("work/isofiles/union_patched/{0}".format(union_index), 'wb')
        update_pointer = False
        update_pallete = []
        update_pixel = []
        for pal, pix in zip(info["content"]["pallete"], info["content"]["pixel"]):
            try:
                os.system(
                    "bin\\GimConv\\GimConv.exe work/isofiles/cgs_translated/{0}_{1:02d}.png -o {2}/work/isofiles/temp.gim {3}".format(
                        union_index, pixel_index, cwd, pix["format"]))
                gim = open("work/isofiles/temp.gim".format(union_index, pixel_index), 'rb')
            except:
                sys.exit()
            gim.seek(0x44)
            gim_format = struct.unpack("H", gim.read(2))[0]
            gim.seek(0x34)
            pixel_size = struct.unpack("I", gim.read(4))[0] - 0x50
            if (gim_format != 4) and (gim_format != 5):
                print("Invalid gim format, make sure the png format are indexed color.")
                sys.exit()
            gim.seek(0x80)
            pixel = make_pixel(pix["chunk"], pix["chunk_offset"][0], pix["gzip_dsizes"],
                               io.BytesIO(gim.read(pixel_size)))
            gim.seek(4, 1)
            palet_size = struct.unpack("I", gim.read(4))[0] - 0x50
            gim.seek(0x48, 1)
            pallete = gim.read(palet_size)
            gim.close()
            os.remove("work/isofiles/temp.gim")
            pixel_index+=1
            if info["ptr_offset"] == None:
                out.seek(pal["offset"])
                out.write(pallete)
                out.seek(pix["offset"])
                out.write(pixel)
            else:
                update_pointer = True
                update_pallete.append(pallete)
                update_pixel.append(pixel)
        if info["content"]["map"]:
            map = open("work/isofiles/cgs/{0}.map".format(union_index), "rb").read()
            out.seek(info["content"]["map"]["offset"])
            out.write(map)
        if update_pointer:
            eboot.seek(info["ptr_offset"])
            for upallete in update_pallete:
                eboot.write(struct.pack("I", out.tell()))
                out.write(upallete)
            for upixel in update_pixel:
                eboot.write(struct.pack("I", out.tell()))
                out.write(upixel)
                align = 0x1000-(0x1000 - (out.tell() % 0x1000))
                if align:
                    out.write(b"\x00" * align)
        out.close()
        if union_index in group1_sizes:
            new_union_size = os.path.getsize("work/isofiles/union_patched/{0}".format(union_index))
            group1_sizes.update({union_index:new_union_size>>11})
        if union_index in group2_sizes:
            new_union_size = os.path.getsize("work/isofiles/union_patched/{0}".format(union_index))
            group2_sizes.update({union_index:new_union_size>>11})
        if union_index in group3_sizes:
            new_union_size = os.path.getsize("work/isofiles/union_patched/{0}".format(union_index))
            group3_sizes.update({union_index: new_union_size >> 11})
    group1_offset = 0
    eboot.seek(group1_ptr_offset)
    for j in group1_sizes:
        eboot.write(struct.pack("HH",group1_offset,group1_sizes[j]))
        group1_offset+=group1_sizes[j]
    group2_offset = 0
    eboot.seek(group2_ptr_offset)
    for j in group2_sizes:
        eboot.write(struct.pack("HH",group2_offset,group2_sizes[j]))
        group2_offset += group2_sizes[j]
    group3_offset = 0
    eboot.seek(group3_ptr_offset)
    for j in group3_sizes:
        eboot.write(struct.pack("HH", group3_offset, group3_sizes[j]))
        group3_offset += group3_sizes[j]




if __name__ == "__main__":
    cgs_insert()